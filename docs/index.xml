<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Tokio——Rust 编程语言的异步运行时。</title>
    <link>https://tokio-cn.github.io/docs/</link>
    <description>Recent content in Docs on Tokio——Rust 编程语言的异步运行时。</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://tokio-cn.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tokio 是什么？</title>
      <link>https://tokio-cn.github.io/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/overview/</guid>
      <description>Tokio allows developers to write asynchronous programs in the Rust programming language. Instead of synchronously waiting for long-running operations (like reading a file or waiting for a timer to complete) before moving on to the next thing, Tokio allows developers to write programs where execution continues while the long-running operations are in progress.
More specifically, Tokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with Rust. At a high level, it provides a few major components:</description>
    </item>
    
    <item>
      <title>Hello world!</title>
      <link>https://tokio-cn.github.io/docs/getting-started/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/hello-world/</guid>
      <description>This guide assumes that a knowledge of the Rust programming language and are using Rust 1.39.0 or higher. To use Tokio with earlier versions of Rust, please check out the Tokio 0.1 docs.
To check version of Rust on the command line:
rustc --version rustc 1.39.0 (4560ea788 2019-11-04)  In version 1.39.0, Rust introduced async-await, see the Async Book for in-depth documentation of these new Rust language features. This guide also seeks to provide a practical, hands-on introduction for all of the Rust language features that are needed for programming with Tokio.</description>
    </item>
    
    <item>
      <title>Cargo dependencies</title>
      <link>https://tokio-cn.github.io/docs/getting-started/cargo-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/cargo-dependencies/</guid>
      <description>Feel free to skip this section, and just use features = [&amp;quot;full&amp;quot;] while learning. This section provides some examples of how and when to choose specific feature groups in Cargo.toml.
Often using all features is fine When writing an app, we&amp;rsquo;ll often use all of Tokio&amp;rsquo;s features to accelerate our development time.
Cargo.toml:
[dependencies] tokio = { version = &amp;quot;0.2&amp;quot;, features = [&amp;quot;full&amp;quot;] }  For most apps, the additional compile time is hardly noticeable relative to the cognitive overhead of thinking about which features are needed.</description>
    </item>
    
    <item>
      <title>Example: An Echo Server</title>
      <link>https://tokio-cn.github.io/docs/getting-started/echo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/echo/</guid>
      <description>We&amp;rsquo;re going to use what has been covered so far to build an echo server. This is a Tokio application that incorporates everything we&amp;rsquo;ve learned so far. The server will simply receive messages from the connected client and send back the same message it received to the client.
We&amp;rsquo;ll be able to test this echo server using the basic Tcp client we created in the hello world section.
The full code can be found here.</description>
    </item>
    
    <item>
      <title>async fn</title>
      <link>https://tokio-cn.github.io/docs/getting-started/futures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/futures/</guid>
      <description>Let&amp;rsquo;s take a closer look at Rust&amp;rsquo;s async fn feature. Tokio is built on top of Rust&amp;rsquo;s asynchronous model. This allows Tokio to interop with other libraries also using the futures crate.
Note: This runtime model is very different than async libraries found in other languages. While, at a high level, APIs can look similar, the way code gets executed differs.
We&amp;rsquo;ll be taking a closer look at the runtime in the upcoming sections, but a basic understanding of the runtime is necessary to understand futures.</description>
    </item>
    
    <item>
      <title>Runtime</title>
      <link>https://tokio-cn.github.io/docs/getting-started/runtime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/runtime/</guid>
      <description>In the previous section we explored async fn Futures which allow us to represent a value that will be available &amp;ldquo;at some point in the future&amp;rdquo;. We mentioned that a Rust Future requires something to poll it for completion and said that the something is the Tokio runtime.
Tokio runtime The Runtime is responsible for repeatedly calling poll on a Future until its value is returned. There are a few different ways this can happen in practice.</description>
    </item>
    
    <item>
      <title>Network Utilities</title>
      <link>https://tokio-cn.github.io/docs/network-utilities/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/network-utilities/overview/</guid>
      <description>This section is not about Tokio. For network programming, testing and debugging, there are a set of utilities that we&amp;rsquo;ve found helpful and are referenced in the guides.</description>
    </item>
    
    <item>
      <title>socat</title>
      <link>https://tokio-cn.github.io/docs/network-utilities/socat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/network-utilities/socat/</guid>
      <description>socat provides the ability to redirect input and outputs. See instructions and links below for quick references on installation for most operating systems.
How to install Debian / Ubuntu Linux sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install socat  Fedora, CentOS, RedHat sudo yum install socat  Mac Homebrew brew install socat  Windows download</description>
    </item>
    
    <item>
      <title>telnet</title>
      <link>https://tokio-cn.github.io/docs/network-utilities/telnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/network-utilities/telnet/</guid>
      <description>The word &amp;ldquo;telnet&amp;rdquo; often refers to the Telnet client, since the command to run the client has the same name as the protocol. This page is about the telnet client which we use in this guide to test and debug servers.
Telnet is a computer protocol that was built for interacting with remote computers ([IETF RFC-854]: https://tools.ietf.org/html/rfc854).
Telnet utility allows users to test connectivity to remote machines and issue commands through the use of a keyboard, and one of the simplest ways to check if a port is open and listening on a network.</description>
    </item>
    
  </channel>
</rss>