<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tokio‚Äî‚ÄîRust ÁºñÁ®ãËØ≠Ë®ÄÁöÑÂºÇÊ≠•ËøêË°åÊó∂„ÄÇ</title>
    <link>https://tokio-cn.github.io/</link>
    <description>Recent content on Tokio‚Äî‚ÄîRust ÁºñÁ®ãËØ≠Ë®ÄÁöÑÂºÇÊ≠•ËøêË°åÊó∂„ÄÇ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 18 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tokio-cn.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tokio ÊòØ‰ªÄ‰πàÔºü</title>
      <link>https://tokio-cn.github.io/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/overview/</guid>
      <description>Tokio allows developers to write asynchronous programs in the Rust programming language. Instead of synchronously waiting for long-running operations (like reading a file or waiting for a timer to complete) before moving on to the next thing, Tokio allows developers to write programs where execution continues while the long-running operations are in progress.
More specifically, Tokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with Rust. At a high level, it provides a few major components:</description>
    </item>
    
    <item>
      <title>Announcing Tokio-Compat</title>
      <link>https://tokio-cn.github.io/blog/2019-12-compat/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2019-12-compat/</guid>
      <description>The release of Tokio 0.2 was the culmination of a great deal of hard work from numerous contributors, and has brought several significant improvements to Tokio. Using std::future and async/await makes writing async code using Tokio much more ergonomic, and a new scheduler implementation makes Tokio 0.2&amp;rsquo;s thread pool as much as 10x faster. However, updating existing Tokio 0.1 projects to use 0.2 and std::future poses some new challenges. Therefore, we&amp;rsquo;re very excited to announce the release of the tokio-compat crate to help ease this transition, by providing a runtime compatible with both Tokio 0.</description>
    </item>
    
    <item>
      <title>Announcing Mio 0.7-alpha.1</title>
      <link>https://tokio-cn.github.io/blog/2019-12-mio-v0.7-alpha.1/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2019-12-mio-v0.7-alpha.1/</guid>
      <description>We are excited to announce Thomas de Zeeuw as the new lead of Mio. Mio is the low level I/O portability abstraction that backs Tokio and other Rust projects. Thomas has been behind most of the Mio 0.7 effort and will be continuing to lead the crate to 1.0. He has written the rest of the announcement.
Mio 0.7 is the work of various contributors over the course of roughly half a year.</description>
    </item>
    
    <item>
      <title>Announcing Tokio 0.2 and a Roadmap to 1.0</title>
      <link>https://tokio-cn.github.io/blog/2019-11-tokio-0-2/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2019-11-tokio-0-2/</guid>
      <description>We are very excited to announce Tokio 0.2. This is a ground up rework of Tokio based on async / await and experience gained over the past three years.
Add the following to Cargo.toml:
tokio = { version = &amp;quot;0.2&amp;quot;, features = [&amp;quot;full&amp;quot;] }  This is a major update, and as such there are changes to almost all parts of the library. To highlight a few:
 Based on async / await for superior ergonomics.</description>
    </item>
    
    <item>
      <title>Making the Tokio scheduler 10x faster</title>
      <link>https://tokio-cn.github.io/blog/2019-10-scheduler/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2019-10-scheduler/</guid>
      <description>We&amp;rsquo;ve been hard at work on the next major revision of Tokio, Rust&amp;rsquo;s asynchronous runtime. Today, a complete rewrite of the scheduler has been submitted as a pull request. The result is huge performance and latency improvements. Some benchmarks saw a 10x speed up! It is always unclear how much these kinds of improvements impact &amp;ldquo;full stack&amp;rdquo; use cases, so we&amp;rsquo;ve also tested how these scheduler improvements impacted use cases like Hyper and Tonic (spoiler: it&amp;rsquo;s really good).</description>
    </item>
    
    <item>
      <title>Diagnostics with Tracing</title>
      <link>https://tokio-cn.github.io/blog/2019-08-tracing/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2019-08-tracing/</guid>
      <description>Effectively developing systems and operating them in production requires visibility into their behavior at runtime. While conventional logging can provide some of this visibility, asynchronous software &amp;mdash; like applications using the Tokio runtime &amp;mdash; introduces new challenges.
tracing is a collection of libraries that provide a framework for instrumenting Rust programs to collect structured, context-aware, event driven diagnostics. Note that tracing was originally released under the name tokio-trace; the name was changed to reflect that, although it is part of the Tokio project, the tokio runtime is not required to use tracing.</description>
    </item>
    
    <item>
      <title>Tokio alpha release with async &amp; await</title>
      <link>https://tokio-cn.github.io/blog/2019-08-alphas/</link>
      <pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2019-08-alphas/</guid>
      <description>We&amp;rsquo;re pleased to announce the release of the first Tokio alpha with async &amp;amp; await support. This includes updating all of the Tokio crates to use std::future instead of futures 0.1. It also includes adding async fn versions of the APIs.
Get it by adding:
tokio = &amp;quot;=0.2.0-alpha.1&amp;quot;  to your Cargo.toml file. This is how an echo server is now written:
#![feature(async_await)] use tokio::net::TcpListener; use tokio::prelude::*; #[tokio::main] async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; { let addr = &amp;quot;127.</description>
    </item>
    
    <item>
      <title>A great 2018, an even better 2019</title>
      <link>https://tokio-cn.github.io/blog/2018-12-recap-2018/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-12-recap-2018/</guid>
      <description>A year ago, Tokio was a very different library. It includes the (now deprecated) tokio-core which provided a future executor, I/O selector, and basic TCP/UDP types in a single library. It also included tokio-proto, but we won&amp;rsquo;t talk about that. Over the past year, Tokio has grown to become Rust&amp;rsquo;s asynchronous I/O platform. It has been adopted by a number of large companies to build apps.
A lot was achieved in 2018.</description>
    </item>
    
    <item>
      <title>Announcing the Tokio Doc Push (we need you!)</title>
      <link>https://tokio-cn.github.io/blog/2018-10-doc-blitz/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-10-doc-blitz/</guid>
      <description>In the past, there has been reoccurring feedback that Tokio is hard to understand. I believe a lack of good documentation plays a significant part. It&amp;rsquo;s time to fix this problem.
And because Tokio is open source, it is on us (the community) to make this happen! üëè
But don&amp;rsquo;t worry, this isn&amp;rsquo;t an aimless request to contribute documentation. It does, however, require participation. There are ways to get involved at any level of prior Tokio experience.</description>
    </item>
    
    <item>
      <title>Experimental async / await support for Tokio</title>
      <link>https://tokio-cn.github.io/blog/2018-08-async-await/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-08-async-await/</guid>
      <description>Happy Monday!
In case you haven&amp;rsquo;t heard, async / await is a big new feature that is being worked on for Rust. It aims to make asynchronous programming easy (well, at least a little bit easier than it is today). The work has been on going for a while and is already usable today on the Rust nightly channel.
I&amp;rsquo;m happy to announce that Tokio now has experimental async / await support!</description>
    </item>
    
    <item>
      <title>Tokio 0.1.8 with many incremental improvements</title>
      <link>https://tokio-cn.github.io/blog/2018-08-incremental-improvements/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-08-incremental-improvements/</guid>
      <description>It took a bit longer than I had initially hoped (as it always does), but a new Tokio version has been released. This release includes, among other features, a new set of APIs that allow performing filesystem operations from an asynchronous context, concurrency improvements, timer improvements, and more (including bug fixes, so be sure to update!).
It has been a little bit since the last post. There haven&amp;rsquo;t been any big feature releases, but that doesn&amp;rsquo;t mean that we have been idle.</description>
    </item>
    
    <item>
      <title>New Tokio release, now with filesystem support</title>
      <link>https://tokio-cn.github.io/blog/2018-05-tokio-fs/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-05-tokio-fs/</guid>
      <description>It took a bit longer than I had initially hoped (as it always does), but a new Tokio version has been released. This release includes, among other features, a new set of APIs that allow performing filesystem operations from an asynchronous context.
Filesystem APIs Interacting with files (and other filesystem types) requires* blocking system calls and we all know that blocking and asynchronous do not mix. So, historically, when people ask &amp;ldquo;how do I read from and write to files?</description>
    </item>
    
    <item>
      <title>New Timer implementation</title>
      <link>https://tokio-cn.github.io/blog/2018-03-timers/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-03-timers/</guid>
      <description>Happy Friday all!
To close out a great week, there is a new release of Tokio. This release includes a brand new timer implementation.
Timers Sometimes (often), one wants to execute code in relation to time. Maybe a function needs to run at a specific instant. Maybe a read needs to be limited to a fixed duration. For working with time, one needs access to a timer!
Some history The tokio-timer crate has been around for a while.</description>
    </item>
    
    <item>
      <title>Announcing the Tokio runtime</title>
      <link>https://tokio-cn.github.io/blog/2018-03-tokio-runtime/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-03-tokio-runtime/</guid>
      <description>I&amp;rsquo;m happy to announce a new release of Tokio. This release includes the first iteration of the Tokio Runtime.
tl;dr This is how a multi-threaded Tokio based server is now written:
extern crate tokio; use tokio::net::TcpListener; use tokio::prelude::*; fn process(s: TcpStream) -&amp;gt; impl Future&amp;lt;Item = (), Error = ()&amp;gt; + Send { ... } let addr = &amp;quot;127.0.0.1:8080&amp;quot;.parse().unwrap(); let listener = TcpListener::bind(&amp;amp;addr).unwrap(); let server = listener.incoming() .map_err(|e| println!(&amp;quot;error = {:?</description>
    </item>
    
    <item>
      <title>Tokio Reform is Shipped and the Road to 0.2</title>
      <link>https://tokio-cn.github.io/blog/2018-02-tokio-reform-shipped/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-02-tokio-reform-shipped/</guid>
      <description>Hi all!
I&amp;rsquo;m happy to announce that today, the changes proposed in the reform RFC have been released to crates.io as tokio 0.1.
The primary changes are:
 Add a default global event loop, eliminating the need for setting up and managing your own event loop in the vast majority of cases.
 Decouple all task execution functionality from Tokio.
  The new global event loop Up until today, creating an event loop was a manual process.</description>
    </item>
    
    <item>
      <title>An RFC for a Tokio revamp</title>
      <link>https://tokio-cn.github.io/blog/2017-09-tokio-reform/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2017-09-tokio-reform/</guid>
      <description>Hi there, Tokio community!
Carl, Alex, and myself have been hard at work developing ways to simplify, streamline, and focus the Tokio project. As part of this effort, we have written the first-ever Tokio RFC!
Here&amp;rsquo;s a quick run-down of what&amp;rsquo;s being proposed.
 Add a global event loop in tokio-core that is managed automatically by default. This change eliminates the need for setting up and managing your own event loop in the vast majority of cases.</description>
    </item>
    
    <item>
      <title>Announcing the tokio-io Crate</title>
      <link>https://tokio-cn.github.io/blog/2017-03-tokio-io/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2017-03-tokio-io/</guid>
      <description>Today we&amp;rsquo;re happy to announce a new crate and several new tools to work with in the Tokio stack. This represents the culmination of a number of parallel updates to various bits and pieces, they just happened to conveniently land all around the same time! In a nutshell the improvements are:
 A new tokio-io crate extracted from tokio-core, deprecating the tokio_core::io module. Introduction of the bytes crate to tokio-io allowing abstraction over buffering and leveraging underlying functionality like vectored I/O.</description>
    </item>
    
    <item>
      <title>Announcing Tokio 0.1</title>
      <link>https://tokio-cn.github.io/blog/2017-01-tokio-0-1/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2017-01-tokio-0-1/</guid>
      <description>Today we are publishing the preliminary version of the Tokio stack, 0.1!
Tokio is a platform for writing fast networking code in Rust. It&amp;rsquo;s built on futures, a zero-cost abstraction for asynchronous programming in Rust. It provides a suite of basic tools, tokio-core, for asynchronous I/O with futures. It also provides a higher-level layer, tokio-proto, for easily building sophisticated servers and clients; all you have to do is handle message serialization.</description>
    </item>
    
    <item>
      <title>Hello world!</title>
      <link>https://tokio-cn.github.io/docs/getting-started/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/hello-world/</guid>
      <description>This guide assumes that a knowledge of the Rust programming language and are using Rust 1.39.0 or higher. To use Tokio with earlier versions of Rust, please check out the Tokio 0.1 docs.
To check version of Rust on the command line:
rustc --version rustc 1.39.0 (4560ea788 2019-11-04)  In version 1.39.0, Rust introduced async-await, see the Async Book for in-depth documentation of these new Rust language features. This guide also seeks to provide a practical, hands-on introduction for all of the Rust language features that are needed for programming with Tokio.</description>
    </item>
    
    <item>
      <title>Cargo dependencies</title>
      <link>https://tokio-cn.github.io/docs/getting-started/cargo-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/cargo-dependencies/</guid>
      <description>Feel free to skip this section, and just use features = [&amp;quot;full&amp;quot;] while learning. This section provides some examples of how and when to choose specific feature groups in Cargo.toml.
Often using all features is fine When writing an app, we&amp;rsquo;ll often use all of Tokio&amp;rsquo;s features to accelerate our development time.
Cargo.toml:
[dependencies] tokio = { version = &amp;quot;0.2&amp;quot;, features = [&amp;quot;full&amp;quot;] }  For most apps, the additional compile time is hardly noticeable relative to the cognitive overhead of thinking about which features are needed.</description>
    </item>
    
    <item>
      <title>Example: An Echo Server</title>
      <link>https://tokio-cn.github.io/docs/getting-started/echo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/echo/</guid>
      <description>We&amp;rsquo;re going to use what has been covered so far to build an echo server. This is a Tokio application that incorporates everything we&amp;rsquo;ve learned so far. The server will simply receive messages from the connected client and send back the same message it received to the client.
We&amp;rsquo;ll be able to test this echo server using the basic Tcp client we created in the hello world section.
The full code can be found here.</description>
    </item>
    
    <item>
      <title>async fn</title>
      <link>https://tokio-cn.github.io/docs/getting-started/futures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/futures/</guid>
      <description>Let&amp;rsquo;s take a closer look at Rust&amp;rsquo;s async fn feature. Tokio is built on top of Rust&amp;rsquo;s asynchronous model. This allows Tokio to interop with other libraries also using the futures crate.
Note: This runtime model is very different than async libraries found in other languages. While, at a high level, APIs can look similar, the way code gets executed differs.
We&amp;rsquo;ll be taking a closer look at the runtime in the upcoming sections, but a basic understanding of the runtime is necessary to understand futures.</description>
    </item>
    
    <item>
      <title>Runtime</title>
      <link>https://tokio-cn.github.io/docs/getting-started/runtime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/runtime/</guid>
      <description>In the previous section we explored async fn Futures which allow us to represent a value that will be available &amp;ldquo;at some point in the future&amp;rdquo;. We mentioned that a Rust Future requires something to poll it for completion and said that the something is the Tokio runtime.
Tokio runtime The Runtime is responsible for repeatedly calling poll on a Future until its value is returned. There are a few different ways this can happen in practice.</description>
    </item>
    
    <item>
      <title>Network Utilities</title>
      <link>https://tokio-cn.github.io/docs/network-utilities/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/network-utilities/overview/</guid>
      <description>This section is not about Tokio. For network programming, testing and debugging, there are a set of utilities that we&amp;rsquo;ve found helpful and are referenced in the guides.</description>
    </item>
    
    <item>
      <title>socat</title>
      <link>https://tokio-cn.github.io/docs/network-utilities/socat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/network-utilities/socat/</guid>
      <description>socat provides the ability to redirect input and outputs. See instructions and links below for quick references on installation for most operating systems.
How to install Debian / Ubuntu Linux sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install socat  Fedora, CentOS, RedHat sudo yum install socat  Mac Homebrew brew install socat  Windows download</description>
    </item>
    
    <item>
      <title>telnet</title>
      <link>https://tokio-cn.github.io/docs/network-utilities/telnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/network-utilities/telnet/</guid>
      <description>The word &amp;ldquo;telnet&amp;rdquo; often refers to the Telnet client, since the command to run the client has the same name as the protocol. This page is about the telnet client which we use in this guide to test and debug servers.
Telnet is a computer protocol that was built for interacting with remote computers ([IETF RFC-854]: https://tools.ietf.org/html/rfc854).
Telnet utility allows users to test connectivity to remote machines and issue commands through the use of a keyboard, and one of the simplest ways to check if a port is open and listening on a network.</description>
    </item>
    
    <item>
      <title>Google Summer of Code</title>
      <link>https://tokio-cn.github.io/gsoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/gsoc/</guid>
      <description>This is the list of ideas for students wishing to apply to Google Summer of Code. For more information on what the program is and how to apply, see the student guide. If you&amp;rsquo;re interested in applying we would love to get to know you more on Discord.
The most successful projects are often those proposed by the students themselves. The following list represents some of our ideas and wishes for the project.</description>
    </item>
    
    <item>
      <title>Third-party crates</title>
      <link>https://tokio-cn.github.io/community/third-party/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/community/third-party/</guid>
      <description>Currently the futures, tokio-core, tokio-service, and tokio-proto crates provide the foundation for the Tokio ecosystem. There&amp;rsquo;s a growing set of crates outside of Tokio itself, however, filling in more functionality!
 tokio-curl is an HTTP client library backed by the libcurl C library. tokio-timer is a timer library providing finer-grained control over timers and helpful timeout facilities over the types in tokio-core. tokio-tls is a library for TLS streams backed by native-tls.</description>
    </item>
    
    <item>
      <title>Tokio Á§æÂå∫</title>
      <link>https://tokio-cn.github.io/community/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/community/</guid>
      <description>Communication The Tokio community is most readily found on its Discord, where you&amp;rsquo;re welcome to ask questions, report problems, or pitch ideas.
Issues Github is used for tracking issues. The primary location for these is the main Tokio repository.
If you&amp;rsquo;re a Tokio user, you&amp;rsquo;re highly encouraged to keep an eye on these issues and jump in on the discussions, to help us understand how design tradeoffs might affect you.</description>
    </item>
    
  </channel>
</rss>