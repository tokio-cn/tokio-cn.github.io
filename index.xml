<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tokio——Rust 编程语言的异步运行时。</title>
    <link>https://tokio-cn.github.io/</link>
    <description>Recent content on Tokio——Rust 编程语言的异步运行时。</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 04 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tokio-cn.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tokio 是什么？</title>
      <link>https://tokio-cn.github.io/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/overview/</guid>
      <description>Tokio allows developers to write asynchronous programs in the Rust programming language. Instead of synchronously waiting for long-running operations like reading a file or waiting for a timer to complete before moving on to the next thing, Tokio allows developers to write programs where execution continues while the long-running operations are in progress.
More specifically, Tokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with Rust. At a high level, it provides a few major components:</description>
    </item>
    
    <item>
      <title>Announcing the Tokio Doc Push (we need you!)</title>
      <link>https://tokio-cn.github.io/blog/2018-10-doc-blitz/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-10-doc-blitz/</guid>
      <description>In the past, there has been reoccurring feedback that Tokio is hard to understand. I believe a lack of good documentation plays a significant part. It&amp;rsquo;s time to fix this problem.
And because Tokio is open source, it is on us (the community) to make this happen! 👏
But don&amp;rsquo;t worry, this isn&amp;rsquo;t an aimless request to contribute documentation. It does, however, require participation. There are ways to get involved at any level of prior Tokio experience.</description>
    </item>
    
    <item>
      <title>Experimental async / await support for Tokio</title>
      <link>https://tokio-cn.github.io/blog/2018-08-async-await/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-08-async-await/</guid>
      <description>Happy Monday!
In case you haven&amp;rsquo;t heard, async / await is a big new feature that is being worked on for Rust. It aims to make asynchronous programming easy (well, at least a little bit easier than it is today). The work has been on going for a while and is already usable today on the Rust nightly channel.
I&amp;rsquo;m happy to announce that Tokio now has experimental async / await support!</description>
    </item>
    
    <item>
      <title>Tokio 0.1.8 with many incremental improvements</title>
      <link>https://tokio-cn.github.io/blog/2018-08-incremental-improvements/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-08-incremental-improvements/</guid>
      <description>It took a bit longer than I had initially hoped (as it always does), but a new Tokio version has been released. This release includes, among other features, a new set of APIs that allow performing filesystem operations from an asynchronous context, concurrency improvements, timer improvements, and more (including bug fixes, so be sure to update!).
It has been a little bit since the last post. There haven&amp;rsquo;t been any big feature releases, but that doesn&amp;rsquo;t mean that we have been idle.</description>
    </item>
    
    <item>
      <title>New Tokio release, now with filesystem support</title>
      <link>https://tokio-cn.github.io/blog/2018-05-tokio-fs/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-05-tokio-fs/</guid>
      <description>It took a bit longer than I had initially hoped (as it always does), but a new Tokio version has been released. This release includes, among other features, a new set of APIs that allow performing filesystem operations from an asynchronous context.
Filesystem APIs Interacting with files (and other filesystem types) requires* blocking system calls and we all know that blocking and asynchronous do not mix. So, historically, when people ask &amp;ldquo;how do I read from and write to files?</description>
    </item>
    
    <item>
      <title>New Timer implementation</title>
      <link>https://tokio-cn.github.io/blog/2018-03-timers/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-03-timers/</guid>
      <description>Happy Friday all!
To close out a great week, there is a new release of Tokio. This release includes a brand new timer implementation.
Timers Sometimes (often), one wants to execute code in relation to time. Maybe a function needs to run at a specific instant. Maybe a read needs to be limited to a fixed duration. For working with time, one needs access to a timer!
Some history The tokio-timer crate has been around for a while.</description>
    </item>
    
    <item>
      <title>Announcing the Tokio runtime</title>
      <link>https://tokio-cn.github.io/blog/2018-03-tokio-runtime/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-03-tokio-runtime/</guid>
      <description>I&amp;rsquo;m happy to announce a new release of Tokio. This release includes the first iteration of the Tokio Runtime.
tl;dr This is how a multi-threaded Tokio based server is now written:
extern crate tokio; use tokio::net::TcpListener; use tokio::prelude::*; fn process(s: TcpStream) -&amp;gt; impl Future&amp;lt;Item = (), Error = ()&amp;gt; + Send { ... } let addr = &amp;quot;127.0.0.1:8080&amp;quot;.parse().unwrap(); let listener = TcpListener::bind(&amp;amp;addr).unwrap(); let server = listener.incoming() .map_err(|e| println!(&amp;quot;error = {:?</description>
    </item>
    
    <item>
      <title>Tokio Reform is Shipped and the Road to 0.2</title>
      <link>https://tokio-cn.github.io/blog/2018-02-tokio-reform-shipped/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2018-02-tokio-reform-shipped/</guid>
      <description>Hi all!
I&amp;rsquo;m happy to announce that today, the changes proposed in the reform RFC have been released to crates.io as tokio 0.1.
The primary changes are:
 Add a default global event loop, eliminating the need for setting up and managing your own event loop in the vast majority of cases.
 Decouple all task execution functionality from Tokio.
  The new global event loop Up until today, creating an event loop was a manual process.</description>
    </item>
    
    <item>
      <title>An RFC for a Tokio revamp</title>
      <link>https://tokio-cn.github.io/blog/2017-09-tokio-reform/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2017-09-tokio-reform/</guid>
      <description>Hi there, Tokio community!
Carl, Alex, and myself have been hard at work developing ways to simplify, streamline, and focus the Tokio project. As part of this effort, we have written the first-ever Tokio RFC!
Here&amp;rsquo;s a quick run-down of what&amp;rsquo;s being proposed.
 Add a global event loop in tokio-core that is managed automatically by default. This change eliminates the need for setting up and managing your own event loop in the vast majority of cases.</description>
    </item>
    
    <item>
      <title>Announcing the tokio-io Crate</title>
      <link>https://tokio-cn.github.io/blog/2017-03-tokio-io/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2017-03-tokio-io/</guid>
      <description>Today we&amp;rsquo;re happy to announce a new crate and several new tools to work with in the Tokio stack. This represents the culmination of a number of parallel updates to various bits and pieces, they just happened to conveniently land all around the same time! In a nutshell the improvements are:
 A new tokio-io crate extracted from tokio-core, deprecating the tokio_core::io module. Introduction of the bytes crate to tokio-io allowing abstraction over buffering and leveraging underlying functionality like vectored I/O.</description>
    </item>
    
    <item>
      <title>Announcing Tokio 0.1</title>
      <link>https://tokio-cn.github.io/blog/2017-01-tokio-0-1/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/blog/2017-01-tokio-0-1/</guid>
      <description>Today we are publishing the preliminary version of the Tokio stack, 0.1!
Tokio is a platform for writing fast networking code in Rust. It&amp;rsquo;s built on futures, a zero-cost abstraction for asynchronous programming in Rust. It provides a suite of basic tools, tokio-core, for asynchronous I/O with futures. It also provides a higher-level layer, tokio-proto, for easily building sophisticated servers and clients; all you have to do is handle message serialization.</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://tokio-cn.github.io/docs/getting-started/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/hello-world/</guid>
      <description>为了开始我们的 Tokio 之旅，我们会以惯例“hello world”开始。这个服务器会监听接入的连接。收到连接后，它会向客户端写入“hello world”并关闭连接。
Before we begin you should have a basic understanding of how TCP sockets work. Having an understanding of Rust&amp;rsquo;s standard library implementation is also helpful.
我们开始吧。
首先，生成一个新的 crate。
$ cargo new --bin hello-world $ cd hello-world  接下来，添加必要的依赖项：
[dependencies] tokio = &amp;quot;0.1&amp;quot;  还有 main.rs 中的 crate 与类型：
# #![deny(deprecated)] extern crate tokio; use tokio::io; use tokio::net::TcpListener; use tokio::prelude::*; # fn main() {}  编写服务器 第一步是将 TcpListener 绑定到本地端口。我们使用 Tokio 提供的 TcpListener 实现。</description>
    </item>
    
    <item>
      <title>运行时模型</title>
      <link>https://tokio-cn.github.io/docs/getting-started/runtime-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/runtime-model/</guid>
      <description>现在我们要介绍 Tokio / future 运行时模型。Tokio 建立在 futures crate 之上并使用其运行时模型。这让 Tokio 可以与其他也使用 futures crate 的库进行互操作。
注：这个运行时模型与其他语言中的异步库非常不同。虽然在高级别的 API 上看起来很相似，但是代码执行的方式却并不相同。
同步模型 首先，我们来简要谈谈同步（或阻塞）模型。这是 Rust 标准库使用的模型。
# use std::io::prelude::*; # use std::net::TcpStream; # fn dox(mut socket: TcpStream) { // let socket = ……; let mut buf = [0; 1024]; let n = socket.read(&amp;amp;mut buf).unwrap(); // 使用 &amp;amp;buf[..n]; # }  当调用 socket.read 时，要么该套接字在其接收缓冲区有待读取的数据， 要么没有。如果有待读取的数据，那么对 read 的调用会立即返回并且以相应数据填充 buf。而如果没有待读取的数据，那么 read 函数会阻塞当前线程直到收到数据。这时，会以这次新接收到的数据填充 buf 并且 read 函数会返回。
为了对多个不同的套接字并发执行读取操作，需要每个套接字一个线程。每个套接字使用一个线程不能很好地伸缩到大量的套接字。这就是所谓的 c10k 问题。</description>
    </item>
    
    <item>
      <title>Futures</title>
      <link>https://tokio-cn.github.io/docs/getting-started/futures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/futures/</guid>
      <description>Futures, hinted at earlier in the guide, are the building block used to manage asynchronous logic. They are the underlying asynchronous abstraction used by Tokio.
The future implementation is provided by the futures crate. However, for convenience, Tokio re-exports a number of the types.
What Are Futures? A future is a value that represents the completion of an asynchronous computation. Usually, the future completes due to an event that happens elsewhere in the system.</description>
    </item>
    
    <item>
      <title>Tasks</title>
      <link>https://tokio-cn.github.io/docs/getting-started/tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/tasks/</guid>
      <description>Tasks are the application&amp;rsquo;s &amp;ldquo;unit of logic&amp;rdquo;. They are similar to Go&amp;rsquo;s goroutine and Erlang&amp;rsquo;s process, but asynchronous. In other words, tasks are asynchronous green threads.
Given that a task runs an asynchronous bit of logic, they are represented by the Future trait. The task&amp;rsquo;s future implementation completes with a () value once the task is done processing.
Tasks are passed to executors, which handle scheduling the task. An executor usually is scheduling many tasks across a single or small set of threads.</description>
    </item>
    
    <item>
      <title>I/O with Tokio</title>
      <link>https://tokio-cn.github.io/docs/getting-started/io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/io/</guid>
      <description>The tokio crate comes with TCP and UDP networking types. Unlike the types in std, Tokio&amp;rsquo;s networking types are based on the poll model and will notify the task executors when their readiness states change (data is received and write buffers are flushed). In the tokio::net module you&amp;rsquo;ll find types like TcpListener, TcpStream, and UdpSocket.
All of these types provide both a future API as well as a poll API.</description>
    </item>
    
    <item>
      <title>Example: A Chat Server</title>
      <link>https://tokio-cn.github.io/docs/getting-started/chat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/getting-started/chat/</guid>
      <description>We&amp;rsquo;re going to use what has been covered so far to build a chat server. This is a non-trivial Tokio server application.
The server is going to use a line-based protocol. Lines are terminated by \r\n. This is compatible with telnet, so we will just use telnet for the client. When a client connects, it must identify itself by sending a line containing its &amp;ldquo;nick&amp;rdquo; (i.e., some name used to identify the client amongst its peers).</description>
    </item>
    
    <item>
      <title>Timers</title>
      <link>https://tokio-cn.github.io/docs/going-deeper/timers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/going-deeper/timers/</guid>
      <description>When writing a network based application, it is common to need to perform actions based on time.
 Run some code after a set period of time. Cancel a running operation that takes too long. Repeatedly perform an action at an interval.  These use cases are handled by using the various timer APIs that are provided in the timer module.
Running code after a period of time In this case, we want to perform a task after a set period of time.</description>
    </item>
    
    <item>
      <title>Essential combinators</title>
      <link>https://tokio-cn.github.io/docs/going-deeper/futures-mechanics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/going-deeper/futures-mechanics/</guid>
      <description>We saw a few of the most important combinators in the futures and streams overviews. Here we&amp;rsquo;ll take a look at a few more. It&amp;rsquo;s also worth spending some time with the trait documentation to familiarize yourself with the full range of combinators available (cheatsheet).
Some concrete futures and streams Any value can be turned into an immediately complete future. There are a few functions in the future module for creating such a future:</description>
    </item>
    
    <item>
      <title>Returning futures</title>
      <link>https://tokio-cn.github.io/docs/going-deeper/returning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/going-deeper/returning/</guid>
      <description>When working with futures, one of the first things you&amp;rsquo;re likely to need to do is to return a Future. As with Iterators, however, doing so can be a little tricky. There are several options, listed from most to least ergonomic:
 Trait objects impl Trait Named types Custom types  Trait objects First, you always have the option of returning a boxed trait object:
# extern crate futures; # use std::io; # use futures::Future; # fn main() {} fn foo() -&amp;gt; Box&amp;lt;Future&amp;lt;Item = u32, Error = io::Error&amp;gt;&amp;gt; { // .</description>
    </item>
    
    <item>
      <title>Working with framed streams</title>
      <link>https://tokio-cn.github.io/docs/going-deeper/frames/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/going-deeper/frames/</guid>
      <description>Tokio has helpers to transform a stream of bytes into a stream of frames. Examples of byte streams include TCP connections, pipes, file objects and the standard input and output file descriptors. In Rust, streams are easily identified because they implement the Read and Write traits.
One of the simplest forms of framed message is the line delimited message. Each message ends with a \n character. Let&amp;rsquo;s look at how one would implement a stream of line delimited messages with tokio.</description>
    </item>
    
    <item>
      <title>Building a runtime</title>
      <link>https://tokio-cn.github.io/docs/going-deeper/building-runtime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/going-deeper/building-runtime/</guid>
      <description>The runtime ‒ all the pieces needed to run an event driven application ‒ is already available. You don&amp;rsquo;t need to know this if you want to just use tokio. However, it may be useful to know what happens under the hood, both to gain some more understanding of the details in case something goes wrong, and to be able to customize it beyond what the runtime Builder supports.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://tokio-cn.github.io/docs/internals/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/internals/intro/</guid>
      <description>The internals section provides an in-depth guide of Tokio&amp;rsquo;s internals. It expects the reader already has a good understanding of how to use Tokio. Those unfamiliar with Tokio should start with the getting started guide.
 Runtime model - An overview of Tokio&amp;rsquo;s asynchronous runtime model. Non-blocking I/O - Implementation details of Tokio&amp;rsquo;s network related types (TCP, UDP, &amp;hellip;).  </description>
    </item>
    
    <item>
      <title>Runtime model</title>
      <link>https://tokio-cn.github.io/docs/internals/runtime-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/internals/runtime-model/</guid>
      <description>Applications written using Tokio are organized across a large number of small, non-blocking tasks. A Tokio task is similar to a goroutine or an Erlang process, but is non-blocking. They are designed to be lightweight, can be spawned fast, and maintain low scheduling overhead. They are also non-blocking, as such operations that are not able to finish immediately must still return immediately. Instead of returning the result of the operation, they return a value indicating that the operation is in progress.</description>
    </item>
    
    <item>
      <title>Non-blocking I/O</title>
      <link>https://tokio-cn.github.io/docs/internals/net/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/docs/internals/net/</guid>
      <description>This section describes the network resources and drivers provided by Tokio. This component provides one of Tokio&amp;rsquo;s primary functions: non-blocking, event-driven, networking provided by the appropriate operating system primitives (epoll, kqueue, IOCP, &amp;hellip;). It is modeled after the resource and driver pattern described in the previous section.
The network driver is built using [mio] and network resources are backed by types that implement Evented.
This guide will be focused on TCP types.</description>
    </item>
    
    <item>
      <title>Third-party crates</title>
      <link>https://tokio-cn.github.io/community/third-party/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/community/third-party/</guid>
      <description>Currently the futures, tokio-core, tokio-service, and tokio-proto crates provide the foundation for the Tokio ecosystem. There&amp;rsquo;s a growing set of crates outside of Tokio itself, however, filling in more functionality!
 tokio-curl is an HTTP client library backed by the libcurl C library. tokio-timer is a timer library providing finer-grained control over timers and helpful timeout facilities over the types in tokio-core. tokio-tls is a library for TLS streams backed by native-tls.</description>
    </item>
    
    <item>
      <title>Tokio 社区</title>
      <link>https://tokio-cn.github.io/community/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tokio-cn.github.io/community/</guid>
      <description>The Tokio community is most readily found on its gitter channel, where you&amp;rsquo;re welcome to ask questions, report problems, or pitch ideas.
Github is used for tracking issues.
We also have an issue tracker on the main Tokio repository
If you&amp;rsquo;re a Tokio user, you&amp;rsquo;re highly encouraged to keep an eye on these issues and jump in on the discussions, to help us understand how design tradeoffs might affect you.</description>
    </item>
    
  </channel>
</rss>